#!/usr/bin/env python3

import argparse
import pathlib

from models import Models
import register_models

if __name__ == '__main__':
    argparser = argparse.ArgumentParser(description="Starflat model solver.")
    argparser.add_argument('--dataset-path', type=pathlib.Path, help="Starflat sequence dataset path.")
    argparser.add_argument('--config-path', type=pathlib.Path, help="Configuration file path.")
    argparser.add_argument('--output-path', type=pathlib.Path, help="Output path where model solution and plot are saved.")
    argparser.add_argument('--model', type=str, choices=list(Models.keys()), help="Model to solve.")
    argparser.add_argument('--list-models', action='store_true', help="List all implemented models.")
    argparser.add_argument('--plot', action='store_true', help="Generate control plots.")
    argparser.add_argument('--solve', action='store_true', help="Solve the model.")
    argparser.add_argument('--recap', action='store_true', help="Dump general informations on the found solution.")

    args = argparser.parse_args()

    if args.list_models:
        for model in Models.keys():
            print("="*30 + " " + model + " " + "="*30)
            print(Models[model].model_desc())
            print(Models[model].model_math())
            print("")

        exit()

    args.dataset_path = args.dataset_path.expanduser().resolve()
    args.output_path = args.output_path.expanduser().resolve()
    args.config_path = args.config_path.expanduser().resolve()

    model = Models[args.model](args.config_path, args.dataset_path)

    if args.solve:
        print("Solving model...")
        model.solve()
        print("Saving to {}".format(args.output_path))
        model.dump_result(args.output_path.joinpath("model.pickle"))

    if args.recap:
        dataset_name = args.dataset_path.stem.split("_")[-1]
        model.load_result(args.output_path.joinpath("model.pickle"))
        model.dump_recap(args.output_path.joinpath("recap_{}.yaml".format(dataset_name)))

    if args.plot:
        print("Plotting to {}".format(args.output_path))
        model.load_result(args.output_path.joinpath("model.pickle"))
        model.plot(args.output_path)
