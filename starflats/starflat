#!/usr/bin/env python3

import sys
import argparse
import pathlib

from models import Models
import register_models
from utils import sanitize_data

from saunerie.plottools import binplot

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def main():
    argparser = argparse.ArgumentParser(description="Starflat model solver.")
    argparser.add_argument('--dataset-path', type=pathlib.Path, help="Starflat sequence dataset path.")
    argparser.add_argument('--config-path', type=pathlib.Path, help="Configuration file path.")
    argparser.add_argument('--output-path', type=pathlib.Path, help="Output path where model solution and plot are saved.")
    argparser.add_argument('--model', type=str, choices=list(Models.keys()), help="Model to solve.")
    argparser.add_argument('--list-models', action='store_true', help="List all implemented models.")
    argparser.add_argument('--plot', action='store_true', help="Generate control plots.")
    argparser.add_argument('--solve', action='store_true', help="Solve the model.")
    argparser.add_argument('--recap', action='store_true', help="Dump general informations on the found solution.")
    argparser.add_argument('--app', action='store_true')
    argparser.add_argument('--mask-path', type=pathlib.Path)
    argparser.add_argument('--model-path', type=pathlib.Path)

    args = argparser.parse_args()

    if args.list_models:
        for model in Models.keys():
            print("="*30 + " " + model + " " + "="*30)
            print(Models[model].model_desc())
            print(Models[model].model_math())
            print("")

        exit()

    args.dataset_path = args.dataset_path.expanduser().resolve()
    args.output_path = args.output_path.expanduser().resolve()
    args.config_path = args.config_path.expanduser().resolve()
    if args.model_path:
        args.model_path = args.model_path.expanduser().resolve()
    else:
        args.model_path = args.output_path.joinpath("model.pickle")

    model = Models[args.model].from_config(args.config_path)

    if args.mask_path:
        args.mask_path = args.mask_path.expanduser().resolve()
        model.load_mask(args.mask_path)

    if args.app:
        model.load_result(args.model_path)
        df = pd.read_parquet(args.dataset_path)
        df = sanitize_data(df, model.config['photometry'])
        measure_count = len(df)
        df = df.loc[model.mask.mask_from_data(df)]
        if len(df) < measure_count:
            print("Removed {} masked measures".format(measure_count-len(df)))
            print("Measure count={}".format(len(df)))

        df[model.config['photometry']] = 10**(-0.4*model.apply_model(df['x'], df['y'], df['ccdid'], df['qid'], -2.5*np.log10(df[model.config['photometry']])))
        df.to_parquet(args.output_path)
        return

        rms_flux = np.sqrt(np.bincount(model.dp.gaiaid_index[~model.bads], weights=model.dp.psfflux[~model.bads]**2)/np.bincount(model.dp.gaiaid_index[~model.bads])-(np.bincount(model.dp.gaiaid_index[~model.bads], weights=model.dp.psfflux[~model.bads])/np.bincount(model.dp.gaiaid_index[~model.bads]))**2)
        mag_avg = np.bincount(model.dp.gaiaid_index, weights=model.dp.psfflux)/np.bincount(model.dp.gaiaid_index)
        cat_mag = np.bincount(model.dp.gaiaid_index, weights=model.dp.ext_cat_mag)/np.bincount(model.dp.gaiaid_index)
        rms_mag = 2.5/np.log(10)*rms_flux/mag_avg

        plt.subplots(nrows=2, ncols=1, figsize=(10., 4.), sharex=True, gridspec_kw={'hspace': 0.})
        plt.subplot(2, 1, 1)
        mag_bins, rms_bins, err_bins = binplot(cat_mag, rms_mag, bins=np.linspace(15., 21., 10), robust=True, scale=False)
        plt.grid()
        plt.subplot(2, 1, 2)
        plt.plot(mag_bins, rms_bins)
        plt.grid()
        plt.xlabel("$m_G$ [AB mag]")
        plt.show()

    model.load_data(args.dataset_path)

    if args.solve:
        print("Solving model...")
        model.solve()
        print("Saving to {}".format(args.output_path))
        model.dump_result(args.output_path.joinpath("model.pickle"))

    if args.recap:
        dataset_name = args.dataset_path.stem.split("_")[-1]
        model.load_result(args.output_path.joinpath("model.pickle"))
        model.dump_recap(args.output_path.joinpath("recap_{}.yaml".format(dataset_name)))

    if args.plot:
        print("Plotting to {}".format(args.output_path))
        model.load_result(args.output_path.joinpath("model.pickle"))
        model.plot(args.output_path)


sys.exit(main())
